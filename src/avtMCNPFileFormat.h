// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.


// ************************************************************************* //
//                            avtMCNPFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_MCNP_FILE_FORMAT_H
#define AVT_MCNP_FILE_FORMAT_H

#include <avtSTSDFileFormat.h>


// ****************************************************************************
//  Class: avtMCNPFileFormat
//
//  Purpose:
//      Reads in MCNPplugin files as a plugin to VisIt.
//
//  Programmer: imenko_prezimenovic -- generated by xml2avt
//  Creation:   Wed Dec 28 11:06:59 PDT 2022
//
// ****************************************************************************

class avtMCNPFileFormat : public avtSTSDFileFormat
{
  public:
                       avtMCNPFileFormat(const char *filename);
    virtual           ~avtMCNPFileFormat();

    //
    // This is used to return unconvention data -- ranging from material
    // information to information about block connectivity.
    //
    // virtual void      *GetAuxiliaryData(const char *var, const char *type,
    //                                  void *args, DestructorFunction &);
    //

    //
    // These are used to declare what the current time and cycle are for the
    // file.  These should only be defined if the file format knows what the
    // time and/or cycle is.
    //
    // virtual int       GetCycle(void);
    // virtual double    GetTime(void);
    //

    virtual const char    *GetType(void)   { return "MCNPplugin"; };
    virtual void           FreeUpResources(void); 

    virtual vtkDataSet    *GetMesh(const char *);
    virtual vtkDataArray  *GetVar(const char *);
    virtual vtkDataArray  *GetVectorVar(const char *);

  protected:
	  bool initialized;
	  std::string filename;

    virtual void PopulateDatabaseMetaData(avtDatabaseMetaData *);
    virtual void ActivateTimestep();
    virtual void Initialize();
    virtual void ReadData();
};


#endif
